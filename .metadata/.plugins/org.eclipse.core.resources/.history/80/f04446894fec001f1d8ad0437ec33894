package com.example.inventory.controller;

import java.util.List;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.inventory.entity.Inventory;
import com.example.inventory.service.InventoryService;

@RestController
@RequestMapping("/inventory")
public class InventoryController {
	
	@Autowired
	private InventoryService service;
	
	@PostMapping("/add")
	public ResponseEntity<?> addItem(@RequestBody Inventory item){
		Inventory i= service.addItem(item);
		return new ResponseEntity<>(i, HttpStatus.CREATED);
	}
	
	@GetMapping("/list")
	public ResponseEntity<List<Inventory>> getItems (){
		List<Inventory> li= service.getAllItems();
		if(li.size()>0) {
			return new ResponseEntity<>(li, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PutMapping("/update/{id}")
	public ResponseEntity<?> updateInventory(@RequestBody Inventory item, @PathVariable Long id){
		Inventory i= service.updateItem(id, item);
		if(i!=null) {
			return new ResponseEntity<>(i, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(i, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<Inventory> deleteInventory(@PathVariable Long id){
		Inventory i=service.deleteItem(id);
		if(i!=null) {
			return new ResponseEntity<>(i, HttpStatus.OK);
			
		}else {
			return new ResponseEntity<>(i, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	 @GetMapping("/downloadreport")
	    public ResponseEntity<?> downloadInventoryReport() {
	        String filePath = service.generateInventoryReport();
	        File file = new File(filePath);

	        if (!file.exists()) {
	            return new ResponseEntity<>("Report generation failed!", HttpStatus.INTERNAL_SERVER_ERROR);
	        }

	        try {
	            Path path = Paths.get(filePath);
	            byte[] data = Files.readAllBytes(path);

	            HttpHeaders headers = new HttpHeaders();
	            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
	            headers.setContentDispositionFormData("attachment", "inventory_report.csv");

	            return new ResponseEntity<>(data, headers, HttpStatus.OK);
	        } catch (Exception e) {
	            return new ResponseEntity<>("Error downloading report!", HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }
	
}
